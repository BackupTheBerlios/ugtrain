###################
### DESCRIPTION ###
###################
# The ugtrain is an advanced free universal game trainer for the CLI under
# GPLv2 license uploaded on GitHub and BerliOS. The dynamic memory support
# sets it apart. A preloader, a memory discovery and a memory hacking library
# are included for this.
# The ugtrain uses one simple config file per game which can be exchanged
# with others. Examples for games which allow cheating are included.
#
# The ugtrain is powered by the Open Game Cheating Association.
#
# ### LEGAL WARNING ###
#
# Don't use game trainers or any other cheating software for commercial
# closed source, multi-player or online games! Please don't use "ugtrain"
# for that! You may violate copyright and other laws by doing so. Recording
# videos of doing so makes the situation even worse in terms of law. Please
# always read the end user license agreement (EULA) of the game to be very
# sure if you are really allowed to do so or not!
#
# ### Current Limitations ###
#
# CPU Architecture:	tested with x86 and x86_64 only
#
# Operating System:	Linux-only
#
# Dynamic Memory:	constructors-only (no growing objects/structures),
#			doesn't work for WINE, yet
#
# Compilation:		dyn. mem. support can't be deactivated,
#			requires multilib support on 64 bit arch for dyn. mem.
#			32-bit and x86_64 only
#
# GUI:			can't serve as a backend, yet
#
# ### Why this tool if only FOSS games allow cheating? ###
#
# For the challange of cheating them without looking at the source or
# even modifying the source code and also for education purposes. Advanced
# reverse engineering methods are often used by computer criminals
# (Crackers) for cheating games. They don't tell you how they do it. The
# goal is to get to know the operating system and the memory management
# better.
#
# ### Why a CLI tool? ###
#
# CLI is important e.g. if you play full-screen on WINE. Some people
# start another X session for the game but we don't like that. Moreover,
# you will be able to write your own GUI frontend for it. CLI tools can
# last decades while GUIs change more frequently.
#
# ### Static Memory ###
#
# The ugtrain freezes memory values but doesn't search for them to make it
# simple. You have to know the memory addresses already and to put them into
# a config file.
# You can search for the memory values e.g. with the CLI tool "scanmem".
#
# There are also GUI tools which can freeze found memory values.
# Where is the difference?
#
# Well, this tool is for the CLI and has much more trainer features. It will
# become multi-platform and the simple config files give you a lot of
# flexibility.
#
# There are universal checks implemented. These prevent changing values e.g.
# while being in the game main menu or making an opponent immortal by accident
# in a vector. This makes static memory freezing a lot safer.
#
# ### Dynamic Memory ###
#
# Why is dynamic memory so important and how to hack it?
#
# Since leaving the good old DOS times, games aren't implemented in C any more
# but instead object-oriented with e.g. C++. Objects are stored on the heap
# memory. But Linux uses heap and stack randomization for security. The only
# thing which remains constant is the code jump back address of the malloc call
# and its offset on the stack memory.
#
# With ugpreload, libmemdisc and static memory search in parallel you can
# easily discover the code address and register with libmemhack as well as
# ugtrain on it to freeze the memory values within the allocated object. The
# preloaded game communicates via FIFOs with ugtrain and tells it exactly when
# the relevant malloc/free call occurred. This is especially useful if your
# distribution requires ptrace and therefore ugtrain to be run as root. Then,
# the game process still can be called as regular user. The "HeroAircraft"
# object of the game "Chromium B.S.U." is one of the included examples.
#
# In the meanwhile there is a lot of automation and simplification implemented
# so that the options -P and -D will help you with that. The option -P ensures
# that ugtrain runs the game in the same process group. This way root is not
# required any more. The libmemhack is automatically preloaded. With -D the
# libmemdisc is preloaded instead and after recording the malloc calls it
# searches for the found memory address from static memory search. This way
# you get a list of all matching mallocs. Most of the time the last malloc
# call is the correct one as interesting objects are kept until game end.
#
# There is also automatic adaption to game version/compiler/distribution
# differences. Please have a look at the -A option. The examples will ask
# you for automatic adaption the first time you run them. You should do
# so and a shell script based on "objdump -D" and "grep" is called to find
# the correct code addresses of your game. With that the discovery is run
# to find the stack offsets. With everything adapted the game starts
# automatically with the new config and it is written back to disk.
#
# Please read 'TODO' for further information.

################################
### HOW TO BUILD AND INSTALL ###
################################
# Make sure that the "autotools-dev" package is installed on your system
# together with "autoconf", "automake" and "libtool".

# Run the following command to generate the missing autotools files:
./autogen.sh

# Configure the build afterwards to generate the Makefiles:
./configure

# Build the ugtrain binary with:
make

# install ugtrain, ugpreload and the libs to /usr/local
sudo make install

# (optional:) ensure PATH includes /usr/local/bin
PATH=$PATH:/usr/local/bin

# (optional:) ensure LD_PATH includes /usr/local/lib*
LD_PATH=$LD_PATH:/usr/local/lib:/usr/local/lib64

# These pathes simplify file usage. Where to set these environment
# variables is distribution specific.

# "objdump" and "scanmem" should be installed as well.

##################
### HOW TO USE ###
##################

# Use the compiled tool as follows:
ugtrain [options] <config>

# This searches in the current working directory for the <config>.conf.
# If it can't find it there it tries ~/.ugtrain/<config>.conf.

# For details use:
ugtrain --help

# Do e.g. the following:
ugtrain -P examples/chromium-bsu64

# This parses the chromium-bsu64.conf from the examples, runs the
# game preloaded with libmemhack64.so and starts freezing the
# configured values. In the examples the config syntax is described.

# If it asks you for automatic adaption, you should accept. The
# adaption can be triggered explicitly as well:
ugtrain -A examples/chromium-bsu64

#########################
### HOW TO CONTRIBUTE ###
#########################
# Please send your patches and improvement suggestions to:
ugtrain-devel@lists.berlios.de

# And/or if you like Open Game Cheating and want to show it
# by becoming a member of the Open Game Cheating Association,
# just write an e-mail to the founder Sebastian Riemer with
# your request:
sebastian.riemer@gmx.de

https://github.com/OpenGameCheatingAssociation/og-cheating
