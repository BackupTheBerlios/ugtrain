warzone2100

# Warzone 2100 - Version 2.3.8, Gentoo Linux, 64-bit
#
# $ ugtrain -P libmemhack64.so examples/warzone2100_238-64


# Found the body points of an own MG Viper droid with scanmem
# by using 'snapshot', shooting at it, using '<' and '='.
# Found out that it has 205 body points initially.
#
# The game starts with 47 droids of which only 7 are our
# own droids. The memory object dump ('>' key during run)
# and the tool 'ugsimfind' are very useful here.

dynmemstart Droid 1040 0x56c0ba 0x8

# Increase the maximum body points
DMaxBody 0x1d4 u16 l 10000 1,9 a
check 0x1d4 u16 g 2
check 0x5c u16 g 2
# Player ID 0 droid? (The AI has 6 and 7 in level 1.)
checko 0x40 u8 e 0

# Read the max. 'body' value from 'originalBody' value
# to avoid nasty assert failed messages.
DBody 0x5c u16 l 0x1d4 1,9 a
check 0x5c u16 g 2

# Experience: From zero to hero
DKills 0x1d8 f32 l 1024.0 2,9 a
check 0x5c u16 g 2
# Player ID 0 droid?
checko 0x40 u8 e 0

# Droids must be fast! Pimp my ride!
DWeight 0x1cc u32 g 2000 3,9 a
check 0x5c u16 g 2
# Player ID 0 droid?
checko 0x40 u8 e 0

DSpeed 0x1d0 u32 l 1000 3,9 a
check 0x5c u16 g 2

dynmemend


# Structure Stats (pointer target)
#
# The size is only important for the dump.
# But we know it from watching the pointers.
# There is a big allocation for all structure
# stats at once. They are contiguous in memory.

ptrmemstart StructStats 160

# Used for checks, don't deactivate!
SType 0x10 u8 watch

ptrmemend


# Structure Functionality (union pointer target)
#
# The size is only important for the dump.
# But we know it from pointer-to-heap
# discovery. This is allocated with calloc().

ptrmemstart StructFunct 64

# Factory (Type 1)

# Build subject
FSubjPtr 0x8 u64 watch

# Time to build - Build very fast!
FBuildTime 0x14 u32 g 0 A a
check SType u8 e 1

# Use max. build points per production cycle.
# Only cheated as this is visible.
FBuildPts 0x3 u8 l 255 A a
check SType u8 e 1

# Power accrued - Build even faster!
FPowerPts 0x4 u32 l 2000 B a
check SType u8 e 1


# Research Facility (Type 10)

# Research subject
RSubjPtr 0x0 u64 watch

# Research points per cycle - Research very fast!
# This is visible.
RResPts 0x10 u32 l 65535 C a
check SType u8 e 10

# Power accrued - Research even faster!
RPowerPts 0x20 u32 l 2000 D a
check SType u8 e 10

ptrmemend


# Found the body points of the command station with scanmem
# by using 'snapshot', shooting at it, using '<' and '='.
# Found out that it has 500 body points initially.

dynmemstart Structure 352 0x56c0aa 0x8

# Make structures indestructible
SBody 0x5c u16 l 10000 4,9 a
check 0x5c u16 g 2
# Player ID 0 structure?
checko 0x40 u8 e 0

# Building structures lasts too long. Make it faster!
SBuild 0xca u16 l 500 5,9 a
check 0x5c u16 g 2
# Player ID 0 structure?
checko 0x40 u8 e 0

SStatPtr 0xc0 p StructStats once

SFuncPtr 0xd8 p StructFunct always

dynmemend


# Adaption
adapt_script adapt/warzone2100_adapt64.sh
adapt_required 1


# Looks like we have some static values here.
# Note: We can't adapt these, yet. Do discovery for them!

Power 0x1212180 i32 l 5000 6 d
check 0x1212180 i32 g 10

# Cheaters don't like to be accused to be one. ;-)
Cheated 0xc91ba0 u8 g 0 7 d
DebugEn 0xcfae50 u8 l 1 8 d


# The bools are easy to discover:
# 0. run the game and "scanmem"
# 1. start a new campaign
# 2. search for 0
# 3. activate cheats
# 4. use a cheat
# 5. search for 1
# 6. jump to step 1 until two matches are found

# real variable names in the game source:
# Cheated: Cheated, src/cheat.cpp
# DebugEn: bDoingDebugMappings, src/keymap.cpp
# Power: asPower[0].currentPower, src/power.cpp

# The currentPower is an i64 fixed point value with 32 bit before the
# point and 32 bit after it. We were lucky to find it as i32 this way.
# For ugtrain only these 32 bit count.

# Please read examples/README for the syntax description
