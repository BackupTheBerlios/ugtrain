# The config syntax is like this:

# GameProcessName
#
#    The game process name must always be located in the first line.
#    The PID is searched by name with "pidof -s".
#
# game_path AbsGamePath
#
#    The absolute game path is optional and must end with the GameProcessName.
#    It is used to run the game and for discovery as well as adaption.
#    Without this, it is determined automatically from the GameProcessName.
#
###############################################################################
#
#    +++ Static memory +++:
#
#    < Values + checks >
#
#    Value:
# ValName AbsAddress DataType [optional check] WishValue KeyBindings ActState
#
#    All addresses and offsets are in HEX starting with "0x" (e.g. 0xdeadbeef).
#
#    Possible DataTypes: i8, i16, i32, i64, u8, u16, u32, u64, f32, f64
#
#    checks: 'l' = "less than", 'g' = "greater than", '' = unchecked
#
#    Static wish values are in decimal (e.g. 42). But the dynamic wish values
#    'min', 'max' and 'watch' are also possible. 'min' and 'max' start with 0
#    and if the value gets less than min or greater than max, they are freezed
#    at that value. This is good to find out the possible limits within the
#    game. 'watch' makes KeyBindings and ActState useless. The line ends here
#    then and the value is watched but never freezed. The last possibility is
#    to use an absolute address or in dynamic memory an offset in the object
#    (e.g. 0xdeadbeef). Then, the wish value is read from that location each
#    time before checking and freezing it.
#
#    KeyBindings are alphanumeric chars [0-9a-zA-Z] separated by ','. These are
#    processed by non-blocking getch and toggle the activation state at
#    runtime. Multiple keys for the same value and multiple values for the same
#    key are possible.
#
#    The activation state can be directly set to active ('a') or deactivated
#    ('d') upon trainer start in the last colomn. Also watch ('w') is possible
#    which results in ignoring the wish value and just displaying the current
#    value. The difference here is that we can toggle the watching between on
#    and off.
#
#    Check entry:
# check AbsAddress DataType <'l' or 'g'> CheckValue
#
#    Checks are applied to the previously defined value entry.
#
###############################################################################
#
#    +++ Dynamic memory (e.g. C++ constructor) +++:
#
# dynmemstart ObjName ObjSize CodeJumpBackAddrOfMalloc RevOffsOfCodeAddrOnStack
#
#    The object size is in decimal. The rest are addresses starting with "0x".
#    These come from the dynamic memory discovery (libmemdisc) or from the
#    dynamic memory adaption.
#
#    < Values + checks like in static memory but with ObjOffset as Addr >
#
#    Value:
# ValName OffsInObj DataType [optional check] WishValue KeyBindings ActState
#
#    Check entries:
# check OffsInObj DataType <'l' or 'g'> CheckValue
#
# checko OffsInObj DataType <'l' or 'g'> CheckValue
#
#    This is special. If this object check fails, it removes the object from
#    the actively tracked object list like a free() would do. E.g. Warzone
#    2100 uses the player ID in all objects. We don't want to make opponents
#    immortal, so we check the player ID with this.
#
# dynmemend
#
#    Here, the memory class is closed. Static or dynamic memory can follow.
#
###############################################################################
#
#    +++ Dynamic memory adaption +++:
#
# adapt_script RelScriptPath
#
#    A script can be run if requested by ugtrain (-A) to automatically adapt
#    the code address of a dynamic object in the config. Compilers and their
#    options differ from distribution to distribution. Also the game version
#    may differ. But if the object size is still the same, then there is a
#    good chance to adapt by searching for the allocation in the disassembly.
#    The path is relative to the config path.
#
# adapt_required 1
#
#    This is meant to ensure that the user is asked if he wants the automatic
#    adaption to be run when he uses this config the first time. This is why
#    this option is likely set in examples. It can be set to '0' afterwards.
#
###############################################################################
#
#    +++ Additional info +++
#
#    Dynamic memory always needs the preloader. Here, only the code address
#    in the binary where "malloc" is called remains static. We have to find
#    it and its locations on the stack with information from inside the game
#    process.
#    See linuxhooking/examples how to discover and adapt it to other versions.
#
#    Call the trainer first. Then, call the preloaded game in another terminal.
#    Use the preloader for hooking libmemhack32/64.so into the game process.
#    The trainer might require root permissions due to "ptrace" for a process
#    in another process group.
#    So it is better to let the trainer run the preloader with:
#    "ugtrain -P [lib] <config>".
