warzone2100

# Warzone 2100 - Version 3.1.0, Gentoo, 64 bit
#
# $ ugtrain -P libmemhack64.so examples/warzone2100-64
#
# Looks like we have some static bools here.
#
# Cheaters don't like to be accused to be one. ;-)

Cheated 0xbc8280 u8 g 0 1,9 a
DebugEn 0x1002a30 u8 l 1 2,9 a

Power 0x103bf84 i32 l 5000 3,9 a
check 0x103bf84 i32 g 10


# Found the body points of an own MG Viper droid with scanmem
# by using "snapshot", shooting at it, using "<" and "=".
# Found out that it has 205 body points initially.

# The game starts with 47 droids of which only 7 are our
# own droids. The tool ugsimfind is very useful here.

dynmemstart Droid 864 0x4a6c5a 0x4088

# Loading droids from a savegame has another stack offset
dynmemstack 0x5098

# Building a droid has another stack offset.
dynmemstack 0x3b18

# Read the max. 'body' value from 'originalBody' value
# to avoid nasty assert failed messages.
Body 0x70 u16 l 0x1bc 4,9 a
check 0x70 u16 g 2

# Player ID 0 droid? (The AI has 6 and 7 in level 1.)
checko 0x22 u8 l 1

# Experience: From zero to hero
Kills 0x1c2 u16 l 1024 5,9 a
check 0x70 u16 g 2

dynmemend

# Found the body points of the command station with scanmem
# by using "snapshot", shooting at it, using "<" and "=".
# Found out that it has 500 body points initially.

dynmemstart Structure 424 0x5dbe4e 0x3d48

# Loading structure from a savegame has another stack offset
dynmemstack 0x4d88

SBody 0x70 u16 l 2000 6,9 a
check 0x70 u16 g 2

# Player ID 0 structure? (The AI has 6 and 7 in level 1.)
checko 0x22 u8 l 1

dynmemend


# The bools are easy to discover:
# 0. run the game and "scanmem"
# 1. start a new campaign
# 2. search for 0
# 3. activate cheats
# 4. use a cheat
# 5. search for 1
# 6. jump to step 1 until two matches are found

# real variable names in the game source:
# Cheated: Cheated, src/cheat.cpp
# DebugEn: bDoingDebugMappings, src/keymap.cpp
# Power: asPower[0].currentPower, src/power.cpp

# The currentPower is an i64 fixed point value with 32 bit before the
# point and 32 bit after it. We were lucky to find it as i32 this way.
# For ugtrain only these 32 bit count.

# GameProcessName
#
#    The PID is searched by name with "pidof".
#
#    +++ Static memory +++:
#
#    Value:
# ValName MemAddr DataType [optional check] WishValue KeyBindings ActState
#
#    Possible DataTypes: i8, i16, i32, i64, u8, u16, u32, u64, f32, f64
#
#    checks: 'l' = "less than", 'g' = "greater than", '' = unchecked
#
#    KeyBindings are alphanumeric chars separated by ','. These are processed
#    by non-blocking getch and toggle the activation state at runtime. Multiple
#    keys for the same value and multiple values for the same key are possible.
#
#    The activation state can be directly set to active ('a') or deactivated
#    ('d') upon trainer start in the last colomn.
#
#    Check entry:
# check OffsInObj DataType <'l' or 'g'> CheckValue
#
#    Checks are applied to the previously defined value.
#
