warzone2100

# Warzone 2100 - Version 3.1.0, Gentoo Linux, 64-bit
#
# $ ugtrain -P libmemhack64.so examples/warzone2100-64


# Found the body points of an own MG Viper droid with scanmem
# by using 'snapshot', shooting at it, using '<' and '='.
# Found out that it has 205 body points initially.
#
# The game starts with 47 droids of which only 7 are our
# own droids. The memory object dump ('>' key during run)
# and the tool 'ugsimfind' are very useful here.

dynmemstart Droid 864 0x4a6c5a 0x28

# Increase the maximum body points
DMaxBody 0x1bc u16 l 2000 1,9 a
check 0x1bc u16 g 2
check 0x70 u16 g 2

# Player ID 0 droid? (The AI has 6 and 7 in level 1.)
checko 0x22 u8 l 1

# Read the max. 'body' value from 'originalBody' value
# to avoid nasty assert failed messages.
DBody 0x70 u16 l 0x1bc 1,9 a
check 0x70 u16 g 2

# Experience: From zero to hero
Kills 0x1c2 u16 l 1024 2,9 a
check 0x70 u16 g 2

# Droids must be fast! Pimp my ride!
Weight 0x1b4 u32 g 2000 3,9 a
check 0x70 u16 g 2
Speed 0x1b8 u32 l 1000 3,9 a
check 0x70 u16 g 2

dynmemend


# Found the body points of the command station with scanmem
# by using 'snapshot', shooting at it, using '<' and '='.
# Found out that it has 500 body points initially.

dynmemstart Structure 424 0x5dbe4e 0x28

SBody 0x70 u16 l 2000 4,9 a
check 0x70 u16 g 2

# Player ID 0 structure? (The AI has 6 and 7 in level 1.)
checko 0x22 u8 l 1

# Building structures lasts too long. Make it faster!
SBuild 0xb4 u16 l 500 5,9 a
check 0x70 u16 g 2

dynmemend


# Adaption
adapt_script adapt/warzone2100_adapt64.sh
adapt_required 1


# Looks like we have some static values here.
# Note: We can't adapt these, yet. Do discovery for them!

Power 0x103bf84 i32 l 5000 6 d
check 0x103bf84 i32 g 10

# Cheaters don't like to be accused to be one. ;-)
Cheated 0xbc8280 u8 g 0 7 d
DebugEn 0x1002a30 u8 l 1 8 d


# The bools are easy to discover:
# 0. run the game and "scanmem"
# 1. start a new campaign
# 2. search for 0
# 3. activate cheats
# 4. use a cheat
# 5. search for 1
# 6. jump to step 1 until two matches are found

# real variable names in the game source:
# Cheated: Cheated, src/cheat.cpp
# DebugEn: bDoingDebugMappings, src/keymap.cpp
# Power: asPower[0].currentPower, src/power.cpp

# The currentPower is an i64 fixed point value with 32 bit before the
# point and 32 bit after it. We were lucky to find it as i32 this way.
# For ugtrain only these 32 bit count.

# Please read examples/README for the syntax description
